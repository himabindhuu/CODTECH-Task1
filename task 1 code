https://colab.research.google.com/drive/1gu-krBeC0iN6JUWKWmdCYitzQppyie0h?usp=sharing

import os
path='/content/drive/MyDrive/Rice_Image_Dataset/test'

from google.colab import drive
drive.mount('/content/drive')

import PIL
import os
from PIL import Image
import numpy as np

def l_images (path):

  imgs, labels=[],[]
  l1=os.listdir (path)
  for ele in l1:

    l2=os.listdir (path+"/"+ele)

    for j in l2:

      img=Image.open(path+'/'+ele+'/'+j)

      img.resize(size=(250,250))

      img=img.convert('L')

      imgs.append(np.array(img). flatten())

      labels.append(ele)

      del img

  return np.array(imgs),labels

x,y=l_images(path)
x

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
le.fit(y)
y=le.fit_transform(y)

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size=0.3,shuffle=True)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import Dropout
model1=Sequential()
model1.add(Dense(64,input_dim=xtrain.shape[1],activation='relu'))
model1.add(Dense(128,activation='relu'))
# model1.add(Dropout(0.1))
model1.add(Dense(5,activation='softmax'))
model1.add(Dropout(0.1))
model1.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model1.summary()

model1.fit(xtrain,ytrain,epochs=100)
t_history=model1.fit(xtrain,ytrain,epochs=100)

import matplotlib.pyplot as plt
from keras.models import Sequential

t_history = Sequential()

if t_history.history:
  plt.plot(t_history.history['Epoch'], t_history.history['accuracy'], marker='o')
  plt.xlabel("Epochs")
  plt.ylabel("Accuracy")
  plt.show()

import matplotlib.pyplot as plt

# Make predictions on the test set
predictions = model1.predict(xtest)

# Map predicted labels back to original class names
predicted_labels = le.inverse_transform(np.argmax(predictions, axis=1))

# Display a few images with their true and predicted labels
num_display = 7  # Adjust this number based on how many images you want to display
indices_to_display = np.random.choice(len(xtest), num_display, replace=False)

for i in indices_to_display:
    original_label = le.inverse_transform([ytest[i]])[0]
    predicted_label = predicted_labels[i]

    # Reshape the flattened image to its original shape (assuming it was flattened in the function l_images)
    original_image = xtest[i].reshape(250, 250)

    plt.imshow(original_image, cmap='gray')
    plt.title(f'True Label: {original_label}, Predicted Label: {predicted_label}')
    plt.show()

